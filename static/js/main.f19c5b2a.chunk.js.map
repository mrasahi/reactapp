{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["op","App","useState","count","countState","setCountState","handleCountClick","event","target","value","parseInt","console","log","num1","num2","result","calcState","setCalcState","handleNum","handleOp","handleEquals","handleReset","title","plot","poster","movies","movieState","setMovieState","handleInputChange","name","handleAddMovie","preventDefault","onClick","Array","keys","map","num","htmlFor","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f19c5b2a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nlet op = ['+', '-', '*', '/']\r\n\r\n// Start App\r\nconst App = () => {\r\n\r\n    // Counter\r\n    const [countState, setCountState] = useState({\r\n        count: 0 \r\n    })\r\n\r\n    countState.handleCountClick = event => {\r\n        // ternary operator used. It's a shortened if else statement in a single line\r\n        // spread countState with ... before any changes to import all other states to prevent missing overwrites\r\n        setCountState({ ...countState, count: (event.target.value === '0') ? 0 : countState.count + parseInt(event.target.value) })\r\n        console.log(event.target.value)\r\n    }\r\n\r\n\r\n    // Calculator\r\n    const [calcState, setCalcState] = useState({\r\n        num1: '',\r\n        num2: '',\r\n        op: '',\r\n        result: ''\r\n    })\r\n\r\n    calcState.handleNum = event => {\r\n        if (calcState.op === '') {\r\n            setCalcState({ ...calcState, num1: calcState.num1 + event.target.value })\r\n        } else {\r\n            setCalcState({ ...calcState, num2: calcState.num2 + event.target.value })\r\n        }\r\n    }\r\n\r\n    calcState.handleOp = event => {\r\n        if (calcState.num1 !== '') {\r\n            setCalcState({ ...calcState, op: event.target.value})\r\n        } else {\r\n            console.log('Please enter a number first')\r\n        }\r\n    }\r\n\r\n    calcState.handleEquals = event => {\r\n        if (calcState.num2 !== '') {\r\n            switch (calcState.op) {\r\n                case '+':\r\n                    setCalcState({ result: parseInt(calcState.num1) + parseInt(calcState.num2) })\r\n                    break\r\n                case '-':\r\n                    setCalcState({ result: parseInt(calcState.num1) - parseInt(calcState.num2) })\r\n                    break\r\n                case '*':\r\n                    setCalcState({ result: parseInt(calcState.num1) * parseInt(calcState.num2) })\r\n                    break\r\n                case '/':\r\n                    setCalcState({ result: parseInt(calcState.num1) / parseInt(calcState.num2) })\r\n                    break\r\n                default:\r\n                    console.log('Something went wrong in the ops')\r\n                    break\r\n            }\r\n        } else {\r\n            console.log('Please enter a second number')\r\n        }\r\n    }\r\n\r\n    calcState.handleReset = () => {\r\n        setCalcState({ ...calcState, result: '', num1: '', num2: '', op: '' })\r\n      }\r\n\r\n\r\n\r\n    // Movie\r\n    const [movieState, setMovieState] = useState({\r\n        title: '',\r\n        plot: '',\r\n        poster: '',\r\n        movies: []\r\n    })\r\n\r\n    movieState.handleInputChange = event => {\r\n        setMovieState({ ...movieState, [event.target.name]: event.target.value})\r\n    }\r\n\r\n    movieState.handleAddMovie = event => {\r\n        event.preventDefault()\r\n        setMovieState({ ...movieState, movies: {\r\n            title: movieState.title,\r\n            plot: movieState.plot,\r\n            poster: movieState.poster\r\n        }})\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>Count: {countState.count}</h1>\r\n            <button value={+1} onClick={countState.handleCountClick}>Add</button>\r\n            <button value={-1} onClick={countState.handleCountClick}>Subtract</button>\r\n            <button value={0} onClick={countState.handleCountClick}>Reset</button>\r\n\r\n            <hr/>\r\n\r\n            <h1>Calculator App</h1>\r\n            <h1>{calcState.result}</h1>\r\n            <h1>{calcState.num1} {calcState.op} {calcState.num2}</h1>\r\n            { [...Array(10).keys()].map(num => <button value={num} onClick={calcState.handleNum}>{num}</button>)}\r\n            <br/>\r\n            { op.map(op => <button onClick={calcState.handleOp} value={op}>{op}</button>) }\r\n            <br/>\r\n            <button onClick={calcState.handleEquals} value={'equals'}>=</button>\r\n            <br/>\r\n            <button onClick={calcState.handleReset}>Reset</button>\r\n\r\n            <hr/>\r\n\r\n            <h1>Movie Inputs</h1>\r\n            <h1>{movieState.movies}</h1>\r\n\r\n            <form>\r\n                <p>\r\n                    <label htmlFor=\"title\">Title</label>\r\n                    <input\r\n                    name=\"title\"\r\n                    type=\"text\"\r\n                    onChange={movieState.handleInputChange} />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"plot\">plot</label>\r\n                    <input\r\n                    name=\"plot\"\r\n                    type=\"text\"\r\n                    onChange={movieState.handleInputChange} />\r\n                </p>\r\n                <p>\r\n                    <label htmlFor=\"poster\">poster</label>\r\n                    <input\r\n                    name=\"poster\"\r\n                    type=\"text\"\r\n                    onChange={movieState.handleInputChange} />\r\n                </p>\r\n\r\n                <button onClick={movieState.handleAddMovie}>Add Movie</button>\r\n            </form>\r\n\r\n\r\n            <hr/>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n// Export app\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}